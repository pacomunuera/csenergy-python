class HCE_Barbero(HCE): 
  
    def __init__(self, parameters, sca, hce_order):
        
        self.eext = parameters['eext']
        self.hext = parameters['hext']
        self.hint = parameters['hext']
        self.urec = parameters['urec']
        self.sigma = parameters['sigma']
        self.cg = parameters['cg']
        self.pr_shw = parameters['pr_shw']
        self.pr_geo = parameters['pr_geo']
        self.pr_opt = parameters['pr_opt']
        
        HCE.__init__(self, sca, hce_order)
        

    def calcTempOut(tfe, dro, x, qabs, pr, massflow, cp) -> float:
        '''
        HTF output temperature [ºC] Ec. 3.24 Barbero

        Returns
        -------
        float [ºC]
            DESCRIPTION.

        '''
        return tfe + mt.PI*dro*x*qabs*pr/(massflow*cp)   

    def set_qabs(self, pr_opt, dni, pr_shw, pr_geo):
        '''
        Ec. 3.20 Barbero

        Returns
        -------
        float [W]
            DESCRIPTION.
            Thermal power absorbed by the HCE
        '''
        self.qabs = pr_opt*self.cg*dni*pr_shw*pr_geo        
           
    def set_qu(self, urec, tro, tf) -> float:
        self.qu = urec*(tro-tf) #Ec. 3.21
    
    def urec(hint, dro, dri, krec) -> float:
        return 1/((1/hint) + (dro*np.log(dro/dri))/(2*krec)) #Ec. 3.22
    
    def e3_36(pr0,f0,f1,f2,f3,f4) -> float:
    
        return  (1-pr0-
                 f1*(pr0+1/f0)+
                 f2*(pr0+1/f0)**2+
                 f3*(pr0+1/f0)**3+
                 f4*(pr0+1/f0)**4
                 )
    
    def e3_36prime(pr0,f0,f1,f2,f3,f4):
        
        return (-1-f1+
                2*f2*(pr0+1/f0)+
                3*f3*(pr0+1/f0)**2+
                4*f4*(pr0+1/f0)**3
                )
    
    def set_pr(self, qabs):
        
        
        f0 = qabs/(self.urec*(self.tfe-self.text))   
        f1 = ((4*self.sigma*self.eext*self.text**3)+self.hext)/self.urec 
        f2 = 6*self.text**2*(self.sigma*self.eext/self.urec)*(self.qabs/self.urec)
        f3= 4*self.text*(self.sigma*self.eext/self.urec)*(self.qabs/self.urec)**2            
        f4 = (self.sigma*self.eext/self.urec)*(self.qabs/self.urec)
        
        pr0 = scy.optimize.newton(e3_36, pr0, fprime = e3_36prime, args=(f0,f1,f2,f3,f4))
        
        g = -(1+1/f0)+(1+f1)*z+f2*z**2+f3*z**3+f4*z**4
        g1 = f1+2*f2*z+3*f3*z**2+4*f4*z**3
        g2 = 2*f2+6*f3*z+12*f4*z**2
        g3 = 6*f3+24*f4*z
        
        self._pr = ((pr0*g1/(1-g1))*(1/(NTU*x))*(np.exp((1-g1)*NTU*x/g1)-1) -
                (g2/(6*g1))*(pr0*NTU*x)**2 -
                (g3/(24*g1)*(pr0*NTU*x)**3)
                )
        
