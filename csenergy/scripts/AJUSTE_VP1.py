# -*- coding: utf-8 -*-
"""
Created on Sat Apr 25 11:29:44 2020

@author: paco
"""
# -*- coding: utf-8 -*-

import numpy as np
import matplotlib.pyplot as plt


x = np.array([288,298,308,318,328,338,348,358,368,378,388,398,408,418,428,
              438,448,458,468,478,488,498,508,518,528,538,548,558,568,578,
              588,598,608,618,628,638,648,658,668,
              678,688,698,708,718,728,738,748,758,768,778,788,798,808,818,
              828,838,848,858,868,878,888,898])

y = np.array([0.004717,0.00369,0.00295,0.002404,0.001992,0.001676,0.001428,
              0.001231,0.001073,0.000943,0.000837,0.000748,0.000673,0.000609,
              0.000555,0.000508,0.000468,0.000432,0.000401,0.000374,0.000349,
              0.000328,0.000308,0.000291,0.000275,0.000261,0.000248,0.000236,
              0.000225,0.000215,0.000206,0.000198,0.00019,0.000183,0.000176,
              0.00017,0.000164,0.000159,0.000154,
              0.000149239,0.000144737,0.000140403,0.000136183,0.000132023,
              0.000127871,0.000123672,0.000119373,0.00011492,0.000110261,
              0.000105341,0.000100107,9.45058E-05,8.84834E-05,8.19864E-05,
              7.49613E-05,6.73547E-05,5.91129E-05,5.01826E-05,4.05101E-05,
              3.0042E-05,1.87247E-05,6.5048E-06])


# x = np.array([558,568,578,
#               588,598,608,618,628,638,648,658,668,658,668])

# y = np.array([0.000236,0.000225,0.000215,0.000206,0.000198,0.00019,0.000183,0.000176,
#               0.00017,0.000164,0.000159,0.000154,0.000159,0.000154])

# Calcular ajustes para diferentes grados
sols = {}
for grado in range(7,9):
  z = np.polyfit(x, y, grado, full=True)
  sols[grado] = z

# Pintar datos
plt.plot(x, y, 'o')

# Pintar curvas de ajuste
xp = np.linspace(288, 1000, 1000)
for grado, sol in sols.items():
  coefs, error, *_ = sol
  p = np.poly1d(coefs)
  plt.plot(xp, p(xp), "-", label="Gr: %s. Error %.3f" % (grado, error) )
  print(coefs)
plt.legend()



