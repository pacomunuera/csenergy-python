                step += 1

                # Ec. 4.14
                cp = hotfluid.get_cp(tf, pressure)
                mu = hotfluid.get_dynamic_viscosity(tf, pressure)
                rho = hotfluid.get_density(tf, pressure)
                kf = hotfluid.get_thermal_conductivity(tf, pressure)
                #  alpha : difusividad térmica
                alpha = kf / (rho * cp)
                prf = mu / alpha  #  Prandtl = viscosidad dinámica / difusividad_termica
                redri = 4 * massflow / (mu * np.pi * dri)  # Reynolds
                #  Prandtl number at temperature tri
                kfpri = hotfluid.get_thermal_conductivity(tri, pressure)
                rhori =  hotfluid.get_density(tri, pressure)
                cpri = hotfluid.get_cp(tri, pressure)
                alphari = kfpri / (rhori * cpri)
                muri = hotfluid.get_dynamic_viscosity(tri, pressure)
                prfri =  muri / alphari
                nug =((cf / 2)*(redri - 1000) * prfri * (prf / prfri)**0.11 /
                      (1+12.7*(cf/2)**0.5 * (prf**(2/3) - 1)))

                #nudb = 0.023 * redri**0.8 * prf**0.4
                hint = kf * nug / dri

                hext, eext = cls.get_hext_eext(hce, reext, tro1, wind)
                trec = (tro1+tf)/2
                # Ec. 4.22
                hce.set_krec(trec)
                krec = hce.parameters['krec']

                # Ec. 3.22
                urec = 1 / ((1 / hint) + (dro * np.log(dro / dri)) / (2 * krec))
                NTU = urec * x * L * sc.pi * dro / (massflow * cp)  # Ec. 3.30

                f0 = qabs/(urec*(tin-text))
                f1 = ((4*sigma*eext*text**3)+hext)/urec
                f2 = 6*(text**2)*(sigma*eext/urec)*(qabs/urec)
                f3 = 4*text*(sigma*eext/urec)*((qabs/urec)**2)
                f4 = (sigma*eext/urec)*((qabs/urec)**3)

                fx = lambda pr0: (1 - pr0 -
                                  f1*(pr0+(1/f0)) -
                                  f2*((pr0+(1/f0))**2) -
                                  f3*((pr0+(1/f0))**3) -
                                  f4*((pr0+(1/f0))**4))

                dfx = lambda pr0: (-1 - f1 -
                                   2*f2*(pr0+(1/f0)) -
                                   3*f3*(pr0+(1/f0))**2 -
                                   4*f4*(pr0+(1/f0))**3)

                root = sc.optimize.newton(fx,
                                          pr0,
                                          fprime=dfx,
                                          maxiter=100000)

                pr0 = root
                z = pr0 + (1/f0)
                g1 = 1+f1+2*f2*z+3*f3*z**2+4*f4*z**3
                g2 = 2*f2+6*f3*z+12*f4*z**2
                g3 = 6*f3+24*f4*z

                pr2 = ((pr0*g1/(1-g1))*(1/(NTU*x)) *
                       (sc.exp((1-g1)*NTU*x/g1)-1) -
                       (g2/(6*g1))*(pr0*NTU*x)**2 -
                       (g3/(24*g1)*(pr0*NTU*x)**3))





                tro2 = tf+qabs*pr2/urec
                errpr = abs(pr2-pr1)
                errtro = abs(tro2-tro1)
                tro1 = tro2
                pr1 = pr2
                hce.pr = pr1
                hce.set_tout(qabs, hotfluid)
                tf = hce.tout
                tri = tf
                hce.pr = pr1
                hce.set_tout(qabs, hotfluid)